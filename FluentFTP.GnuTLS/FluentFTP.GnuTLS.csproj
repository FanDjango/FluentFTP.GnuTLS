<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<PackageId>FluentFTP.GnuTLS</PackageId>
		<Title>FluentFTP.GnuTLS</Title>
		<Description>Adds support for TLS1.3 streams into FluentFTP using a .NET wrapper of GnuTLS.</Description>
		<Authors>Michael Stiemke, Robin Rodricks, FluentFTP Contributors</Authors>
		<PackageProjectUrl>https://github.com/robinrodricks/FluentFTP</PackageProjectUrl>
		<Copyright>Copyright (c) 2015 Robin Rodricks and FluentFTP Contributors</Copyright>
		<PackageTags>FluentFTP, FluentFTP.GnuTLS, ftp, tls13, gnutls</PackageTags>
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\FluentFTP.GnuTLS.xml</DocumentationFile>
		<SignAssembly>True</SignAssembly>
		<AssemblyOriginatorKeyFile>sn.snk</AssemblyOriginatorKeyFile>
		<Version>1.0.35</Version>
		<PackageLicenseExpression>LGPL-2.1-only</PackageLicenseExpression>
		<PackageIcon>logo-nuget.png</PackageIcon>
        <LangVersion>10.0</LangVersion>
        <RepositoryUrl>https://github.com/robinrodricks/FluentFTP.GnuTLS</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
	</PropertyGroup>

    <PropertyGroup>
		<TargetFrameworks>net6.0;net5.0;netstandard2.0;netstandard2.1;net472;net462</TargetFrameworks>
		<!--
		    default: content;contentFiles

			Projects using packages.config use the "contents" directory (legacy .csproj)
			Projects using PackageReference use the "contentFiles" directory (SDK style .csproj)

			We cannot allow "contents" to be populated automatically, as the "Libs\Win64\..." path
			is included when MSBUILD copies the .dll files. So we populate the content folder by
			ourself.

			We do not need the "contentFiles/any/<framework>/Libs/Win64/... structure with duplication
			for each framework - we don't differentiate .ddl files per each framework. So we populate
			the content folder by ourself. This save a lot of space.
		-->
		<ContentTargetFolders>content;contentFiles</ContentTargetFolders>
    </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="FluentFTP" Version="48.0.3" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
	</PropertyGroup>

	<!--
	Build output folder:
        This copies the .dll files to the respective targetframework folders into
		the root location where the main executable resides.
    -->
    <ItemGroup>
        <ContentWithTargetPath Include="Libs\Win64\**">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
            <TargetPath>%(Filename)%(Extension)</TargetPath>
        </ContentWithTargetPath>
    </ItemGroup>

	<!--
	N U G E T
    -->

	<!-- This copies the .dll files to the package "contentFiles" folders for package reference
	     projects, but without the path. -->
	<ItemGroup>
		<Content Include="Libs\Win64\**">
			<Pack>True</Pack>
			<PackagePath>\contentFiles\%(Filename)%(Extension)</PackagePath>
		</Content>
	</ItemGroup>

	<!-- This copies the .dll files to the package "content" folder for packages.config projects,
		 but without the path. -->
	<ItemGroup>
		<None Include="Libs\Win64\**">
			<Pack>True</Pack>
			<PackagePath>\content\%(Filename)%(Extension)</PackagePath>
		</None>
	</ItemGroup>

	<!-- This magic causes MSBUILD on the install machine to copy in the .dlls on a build.
		 We are moving a .target file (which contains the copy command) to the nuget package
		 build folder. The copy command will move the .dll files to the build output folder. -->
    <ItemGroup>
        <Content Include="Libs\Helpers\FluentFTP.GnuTLS.targets">
            <Pack>True</Pack>
           <PackagePath>build/FluentFTP.GnuTLS.targets</PackagePath>
        </Content>
    </ItemGroup>

    <!-- Logo & License file -> package -->
	<ItemGroup>
        <None Include="..\.github\logo-nuget.png">
            <Pack>True</Pack>
            <PackagePath>\</PackagePath>
        </None>
		<None Include="..\LICENSE">
            <Pack>True</Pack>
            <PackagePath>\</PackagePath>
        </None>
    </ItemGroup>
    
</Project>
