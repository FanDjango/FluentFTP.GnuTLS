<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<PackageId>FluentFTP.GnuTLS</PackageId>
		<Title>FluentFTP.GnuTLS</Title>
		<Description>Adds support for TLS1.3 streams into FluentFTP using a .NET wrapper of GnuTLS.</Description>
		<Authors>Michael Stiemke, Robin Rodricks, FluentFTP Contributors</Authors>
		<PackageProjectUrl>https://github.com/robinrodricks/FluentFTP</PackageProjectUrl>
		<Copyright>Copyright (c) 2015 Robin Rodricks and FluentFTP Contributors</Copyright>
		<PackageTags>FluentFTP, FluentFTP.GnuTLS, ftp, tls13, gnutls</PackageTags>
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\FluentFTP.GnuTLS.xml</DocumentationFile>
		<SignAssembly>True</SignAssembly>
		<AssemblyOriginatorKeyFile>sn.snk</AssemblyOriginatorKeyFile>
		<Version>1.0.29</Version>
		<PackageLicenseExpression>LGPL-2.1-only</PackageLicenseExpression>
		<PackageIcon>logo-nuget.png</PackageIcon>
        <LangVersion>10.0</LangVersion>
        <RepositoryUrl>https://github.com/robinrodricks/FluentFTP.GnuTLS</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
	</PropertyGroup>

    <PropertyGroup>
		<TargetFrameworks>net6.0;net5.0;netstandard2.0;netstandard2.1;net472;net462</TargetFrameworks>
		<!--
		    default: content;contentFiles

			Projects using packages.config use the "contents" directory (legacy .csproj)
			Projects using PackageReference use the "contentFiles" directory (SDK style .csproj)

			We cannot allow "contents" to be populated automatically, as the "Libs\Win64\..." path
			is included when MSBUILD would copy the .dll files. So we populate the content folder
			by ourself.

			We do not need the "contentFiles/any/<framework>/Libs/Win64/... structure with duplication
			of the .dll files for each framework - we don't differentiate .ddl files per each framework.
			So we populate the content folder by ourself. This saves an enormous amount of space.
		-->
		<ContentTargetFolders>content;contentFiles</ContentTargetFolders>
    </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="FluentFTP" Version="48.0.3" />
	</ItemGroup>

	<!--
        This copies the .dll files to the respective targetframework folders into
		the root location where the main executable resides.
    -->
    <ItemGroup>
        <NoneWithTargetPath Include="Libs\Win64\**">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
            <TargetPath>%(Filename)%(Extension)</TargetPath>
        </NoneWithTargetPath>
    </ItemGroup>

	<!--
	N U G E T *******************************************

		To put native dlls in to the package, you should read:

		See: https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/create-packages/native-files-in-net-packages.md
		and  https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/create-packages/Creating-a-Package.md

		To avoid some of the problems involved with this, you can go via the content and contentFiles
		folders to distribute the .dlls as content, that is independant of TFM and RID. 

		If you decide to build via /ref and /runtimes, you could remove the /lib folder using this:
		
		<PropertyGroup>
			<IncludeBuildOutput>false</IncludeBuildOutput>
			<IncludeSymbols>false</IncludeSymbols>
		</PropertyGroup>
    -->

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
	</PropertyGroup>

	<!-- This copies the .dll files to the package "contentFiles" folders for package reference
	     projects, but without the path. -->
	<ItemGroup>
		<None Include="Libs\Win64\**">
			<Pack>True</Pack>
			<PackagePath>\contentFiles\%(Filename)%(Extension)</PackagePath>
		</None>
	</ItemGroup>

	<!-- This copies the .dll files to the package "content" folder for packages.config projects,
		 but without the path. -->
	<ItemGroup>
		<None Include="Libs\Win64\**">
			<Pack>True</Pack>
			<PackagePath>\content\%(Filename)%(Extension)</PackagePath>
		</None>
	</ItemGroup>

    <!-- Logo & License file -> package -->
	<ItemGroup>
        <None Include="..\.github\logo-nuget.png">
            <Pack>True</Pack>
            <PackagePath>\</PackagePath>
        </None>
		<None Include="..\LICENSE">
            <Pack>True</Pack>
            <PackagePath>\</PackagePath>
        </None>
    </ItemGroup>

	<!-- This magic causes MSBUILD on the install machine to copy in the .dlls on a build.
		 We are moving a .target file (which contains the copy command) to the nuget package
		 build folder. The copy command will move the .dll files to the build output folder. -->
	<ItemGroup>
		<None Include="Libs\Helpers\FluentFTP.GnuTLS.targets">
			<Pack>True</Pack>
			<PackagePath>build/FluentFTP.GnuTLS.targets</PackagePath>
		</None>
	</ItemGroup>

	<!--
	N U G E T *******************************************
    -->

</Project>
